/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tango.analysis;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import org.omancode.r.RFaceException;
import org.omancode.r.types.UnsupportedTypeException;
import org.omancode.r.ui.RSwingConsole;
import tango.rEditor.CloseableTabbedPane;
import tango.rEditor.RInputHandler;
import tango.rEditor.JEditTextArea;
import tango.rEditor.RTokenMarker;
import tango.util.utils;

/**
 *
 * @author jean
 */
public class AnalysisGUI extends javax.swing.JPanel {
    final AnalysisCore analysisCore;
    RSwingConsole rConsole;
    JTree rObjectTree;
    JTree rDataframeTree;
    ArrayList<JTextField> objectNumberFields;
    ArrayList<JLabel> objectNumberLabels;
    
    public AnalysisGUI(AnalysisCore analysisCore_) {
        this.analysisCore=analysisCore_;
        
        initComponents();
        setTabListener();
        
        tagList.setSelectionInterval(0, 10);
        
        JEditTextArea rEditor = getEditor();
        rEditor.setName("Editor");
        
        rConsole=new RSwingConsole(true);
        rConsole.setName("Console");
        
        rObjectTree = new JTree();
        rObjectTree.setName("Variables");
        
        rEditorTabbedPane.add(rEditor);
        rConsoleTabbedPane.add(rConsole);
        rConsoleTabbedPane.add(rObjectTree);
        
        
    }
    
    public void setTabListener(){
        analysisTabbedPane.addChangeListener(new ChangeListener() { //add the Listener
            @Override
            public void stateChanged(ChangeEvent e) {

                if(analysisTabbedPane.getSelectedIndex()==2) //Index starts at 0, so Index 2 = Tab3
                {
                    //refreshRObjectTree();
                }
                if(analysisTabbedPane.getSelectedIndex()==1) //Index starts at 0, so Index 2 = Tab3
                {
                    try {
                        //do your stuff on Tab 3
                        refreshDataFrames();
                    } catch (RFaceException ex) {
                        Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (UnsupportedTypeException ex) {
                        Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        
        rConsoleTabbedPane.addChangeListener(new ChangeListener() { //add the Listener
            @Override
            public void stateChanged(ChangeEvent e) {

                if(rConsoleTabbedPane.getSelectedIndex()==1 && analysisTabbedPane.getSelectedIndex()==2) //Index starts at 0, so Index 2 = Tab3
                {
                    //do your stuff on Tab 3
                    refreshRObjectTree();
                }
            }
        });
    }
    
    public JEditTextArea getEditor(){
        JEditTextArea textArea = new JEditTextArea();
        textArea.getDocument().setTokenMarker(new RTokenMarker());
	RInputHandler rih = new RInputHandler();
	rih.addKeyBindings();
	textArea.setInputHandler(rih);
	rPanel.add(textArea, BorderLayout.CENTER);
        return textArea;
    }
    
    protected RSwingConsole getConsole() {
        return rConsole;
    }
    
    protected void fixComboWidth(JComboBox jcb){
        jcb.setAlignmentX(0);
        jcb.setMaximumSize(new Dimension(80, 20)); // fixer la taille. mets les valeurs de tes // rÃªves
        utils.addHorizontalScrollBar(jcb); // ajoute les ascenseurs !! pratique! 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mergeDataframeComboBox3 = new javax.swing.JComboBox();
        analysisTabbedPane = new javax.swing.JTabbedPane();
        extractPanel = new javax.swing.JPanel();
        manipulationPanel = new javax.swing.JPanel();
        constantButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        constantValueTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        constantNameTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        constantDataframeComboBox = new javax.swing.JComboBox();
        concatenateDataframesButton = new javax.swing.JButton();
        mergeDataframesButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        mergePrefixTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        mergeByColumnComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        mergeDataframeComboBox2 = new javax.swing.JComboBox();
        mergeDataframeComboBox1 = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        annotationPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        annotationSelectionList = new javax.swing.JList();
        annotationColumnNameTextField = new javax.swing.JTextField();
        annotationDataframeComboBox = new javax.swing.JComboBox();
        annotationDefaultValueTextField = new javax.swing.JTextField();
        annotationButton = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        measurementTree = new javax.swing.JTree();
        extractButton = new javax.swing.JButton();
        prefixTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        filterTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tagList = new javax.swing.JList();
        objectNumberPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        selectionList = new javax.swing.JList();
        plotsPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        ggplotDataframeComboBox = new javax.swing.JComboBox();
        ggplotColorComboBox = new javax.swing.JComboBox();
        ggplotEcdfButton = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        ggplotVarComboBox = new javax.swing.JComboBox();
        jLabel20 = new javax.swing.JLabel();
        ggplotLintypeComboBox = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        ggplotFacetComboBox = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        iplotsDataframeComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        iplotVar1ComboBox = new javax.swing.JComboBox();
        iplotHistButton = new javax.swing.JButton();
        iplotBarButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        iplotVar2ComboBox = new javax.swing.JComboBox();
        iplotScatterButton = new javax.swing.JButton();
        iplotBoxPlotButton = new javax.swing.JButton();
        iplotSelectionTextField = new javax.swing.JTextField();
        iplotSaveDataFrameCheckBox = new javax.swing.JCheckBox();
        iplotSaveSelectionCheckBox = new javax.swing.JCheckBox();
        iplotExtractSelectionButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        groupByComboBox = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        rPanel = new javax.swing.JPanel();
        rEditorTabbedPane = new CloseableTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        rConsoleTabbedPane = new javax.swing.JTabbedPane();

        mergeDataframeComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        mergeDataframeComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeDataframeComboBox3ActionPerformed(evt);
            }
        });

        extractPanel.setBorder(null);

        manipulationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Manipulation"));

        constantButton.setText("Add constant column");
        constantButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                constantButtonActionPerformed(evt);
            }
        });

        jLabel12.setText("Value");

        constantValueTextField.setText("p1");

        jLabel11.setText("Name");

        constantNameTextField.setText("population");
        constantNameTextField.setToolTipText("");
        constantNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                constantNameTextFieldActionPerformed(evt);
            }
        });

        jLabel13.setText("Dataframe");

        constantDataframeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        constantDataframeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                constantDataframeComboBoxActionPerformed(evt);
            }
        });

        concatenateDataframesButton.setText("Concatenate Dataframes");
        concatenateDataframesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                concatenateDataframesButtonActionPerformed(evt);
            }
        });

        mergeDataframesButton.setText("Merge Dataframes");
        mergeDataframesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeDataframesButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Merge prefix");

        mergePrefixTextField.setText("merge");
        mergePrefixTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergePrefixTextFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("Merge by column");

        mergeByColumnComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Dataframe 2");

        mergeDataframeComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        mergeDataframeComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeDataframeComboBox2ActionPerformed(evt);
            }
        });

        mergeDataframeComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        mergeDataframeComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeDataframeComboBox1ActionPerformed(evt);
            }
        });

        jLabel10.setText("Dataframe 1");

        javax.swing.GroupLayout manipulationPanelLayout = new javax.swing.GroupLayout(manipulationPanel);
        manipulationPanel.setLayout(manipulationPanelLayout);
        manipulationPanelLayout.setHorizontalGroup(
            manipulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manipulationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manipulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manipulationPanelLayout.createSequentialGroup()
                        .addComponent(constantButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manipulationPanelLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(constantValueTextField)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manipulationPanelLayout.createSequentialGroup()
                        .addGroup(manipulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manipulationPanelLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(constantDataframeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manipulationPanelLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(constantNameTextField)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manipulationPanelLayout.createSequentialGroup()
                        .addGroup(manipulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manipulationPanelLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mergePrefixTextField))
                            .addGroup(manipulationPanelLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mergeDataframeComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(manipulationPanelLayout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addComponent(mergeByColumnComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manipulationPanelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mergeDataframeComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manipulationPanelLayout.createSequentialGroup()
                        .addGroup(manipulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(concatenateDataframesButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(mergeDataframesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        manipulationPanelLayout.setVerticalGroup(
            manipulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manipulationPanelLayout.createSequentialGroup()
                .addGroup(manipulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mergeDataframeComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manipulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(mergeDataframeComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(manipulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manipulationPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(mergeByColumnComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manipulationPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manipulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mergePrefixTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mergeDataframesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(concatenateDataframesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(manipulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(constantDataframeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manipulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(constantNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manipulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(constantValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(constantButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        annotationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Annotation"));

        jScrollPane4.setViewportView(annotationSelectionList);

        annotationColumnNameTextField.setText("population");
        annotationColumnNameTextField.setToolTipText("");
        annotationColumnNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annotationColumnNameTextFieldActionPerformed(evt);
            }
        });

        annotationDataframeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annotationDataframeComboBoxActionPerformed(evt);
            }
        });

        annotationDefaultValueTextField.setText("none");
        annotationDefaultValueTextField.setToolTipText("");
        annotationDefaultValueTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annotationDefaultValueTextFieldActionPerformed(evt);
            }
        });

        annotationButton.setText("Annotate");
        annotationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annotationButtonActionPerformed(evt);
            }
        });

        jLabel17.setText("Dataframe");

        jLabel18.setText("Column name");

        jLabel19.setText("Default value");

        javax.swing.GroupLayout annotationPanelLayout = new javax.swing.GroupLayout(annotationPanel);
        annotationPanel.setLayout(annotationPanelLayout);
        annotationPanelLayout.setHorizontalGroup(
            annotationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, annotationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(annotationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(annotationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(annotationPanelLayout.createSequentialGroup()
                        .addGroup(annotationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel17)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(annotationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(annotationColumnNameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(annotationDefaultValueTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(annotationDataframeComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(37, 37, 37))
            .addGroup(annotationPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        annotationPanelLayout.setVerticalGroup(
            annotationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(annotationPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(annotationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(annotationDataframeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(2, 2, 2)
                .addGroup(annotationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(annotationColumnNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGap(5, 5, 5)
                .addGroup(annotationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(annotationDefaultValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(annotationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(233, 233, 233))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Extraction"));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        measurementTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(measurementTree);

        extractButton.setText("Extract");
        extractButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractButtonActionPerformed(evt);
            }
        });

        prefixTextField.setText("extraction");

        jLabel9.setText("Extraction name");

        tagList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(tagList);

        filterTabbedPane.addTab("Tag", jScrollPane2);

        objectNumberPanel.setLayout(new java.awt.GridLayout(1, 0));
        filterTabbedPane.addTab("Object Number", objectNumberPanel);

        jScrollPane3.setViewportView(selectionList);

        filterTabbedPane.addTab("Selections", jScrollPane3);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(prefixTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(extractButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(filterTabbedPane)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filterTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prefixTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extractButton)
                .addContainerGap())
        );

        filterTabbedPane.getAccessibleContext().setAccessibleName("Selection");

        javax.swing.GroupLayout extractPanelLayout = new javax.swing.GroupLayout(extractPanel);
        extractPanel.setLayout(extractPanelLayout);
        extractPanelLayout.setHorizontalGroup(
            extractPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(extractPanelLayout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(annotationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manipulationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        extractPanelLayout.setVerticalGroup(
            extractPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(extractPanelLayout.createSequentialGroup()
                .addGroup(extractPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(annotationPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(manipulationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        analysisTabbedPane.addTab("Extract", extractPanel);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("GGplots"));

        jLabel14.setText("Color");

        jLabel15.setText("Dataframe");

        ggplotDataframeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ggplotDataframeComboBoxActionPerformed(evt);
            }
        });

        ggplotColorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ggplotColorComboBoxActionPerformed(evt);
            }
        });

        ggplotEcdfButton.setText("Plot ECDF");
        ggplotEcdfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ggplotEcdfButtonActionPerformed(evt);
            }
        });

        jLabel16.setText("Variable Y");

        jLabel20.setText("Line type");

        jLabel21.setText("Facet");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ggplotDataframeComboBox, 0, 171, Short.MAX_VALUE))
            .addComponent(ggplotEcdfButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ggplotVarComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ggplotColorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21))
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ggplotLintypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ggplotFacetComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ggplotDataframeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(ggplotVarComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ggplotColorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ggplotLintypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ggplotFacetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ggplotEcdfButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Iplots"));

        iplotsDataframeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iplotsDataframeComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Variable Y");

        jLabel2.setText("Dataframe");

        iplotHistButton.setText("Histogram");
        iplotHistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iplotHistButtonActionPerformed(evt);
            }
        });

        iplotBarButton.setText("Bars");
        iplotBarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iplotBarButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Variable X");

        iplotScatterButton.setText("Scatter");
        iplotScatterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iplotScatterButtonActionPerformed(evt);
            }
        });

        iplotBoxPlotButton.setText("BoxPlots");
        iplotBoxPlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iplotBoxPlotButtonActionPerformed(evt);
            }
        });

        iplotSelectionTextField.setText("currentSelection");

        iplotSaveDataFrameCheckBox.setText("Save Selection DataFrame");

        iplotSaveSelectionCheckBox.setSelected(true);
        iplotSaveSelectionCheckBox.setText("Save Selection to Tango");

        iplotExtractSelectionButton.setText("Extract Selection");
        iplotExtractSelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iplotExtractSelectionButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Group by");

        groupByComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupByComboBoxActionPerformed(evt);
            }
        });

        jLabel8.setText("Selection name");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iplotVar1ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(iplotsDataframeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(iplotScatterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(iplotBoxPlotButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(iplotExtractSelectionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(iplotHistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iplotBarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addGap(36, 36, 36)
                .addComponent(groupByComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addComponent(iplotVar2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(iplotSelectionTextField))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(iplotSaveDataFrameCheckBox)
                            .addComponent(iplotSaveSelectionCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(12, 12, 12))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iplotsDataframeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(iplotVar1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iplotHistButton)
                    .addComponent(iplotBarButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(groupByComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iplotBoxPlotButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(iplotVar2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iplotScatterButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(iplotSelectionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iplotSaveDataFrameCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iplotSaveSelectionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iplotExtractSelectionButton))
        );

        javax.swing.GroupLayout plotsPanelLayout = new javax.swing.GroupLayout(plotsPanel);
        plotsPanel.setLayout(plotsPanelLayout);
        plotsPanelLayout.setHorizontalGroup(
            plotsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plotsPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(401, Short.MAX_VALUE))
        );
        plotsPanelLayout.setVerticalGroup(
            plotsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plotsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(plotsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(216, Short.MAX_VALUE))
        );

        analysisTabbedPane.addTab("Plots", plotsPanel);

        rEditorTabbedPane.setBorder(javax.swing.BorderFactory.createTitledBorder("R Editor"));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("R Console and Variables"));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rConsoleTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rConsoleTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout rPanelLayout = new javax.swing.GroupLayout(rPanel);
        rPanel.setLayout(rPanelLayout);
        rPanelLayout.setHorizontalGroup(
            rPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rPanelLayout.createSequentialGroup()
                .addComponent(rEditorTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        rPanelLayout.setVerticalGroup(
            rPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rPanelLayout.createSequentialGroup()
                .addGroup(rPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rEditorTabbedPane, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        analysisTabbedPane.addTab("R", rPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(analysisTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(analysisTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 640, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void iplotHistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iplotHistButtonActionPerformed
        try {
            // TODO add your handling code here:
            analysisCore.ihist(iplotsDataframeComboBox.getSelectedItem().toString(),iplotVar1ComboBox.getSelectedItem().toString());
        } catch (RFaceException ex) {
            Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_iplotHistButtonActionPerformed

    private void iplotBarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iplotBarButtonActionPerformed
        try {
            // TODO add your handling code here:
            analysisCore.ihist(iplotsDataframeComboBox.getSelectedItem().toString(),iplotVar1ComboBox.getSelectedItem().toString());
        } catch (RFaceException ex) {
            Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_iplotBarButtonActionPerformed

    private void iplotsDataframeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iplotsDataframeComboBoxActionPerformed
        try {
            // TODO add your handling code here:
            variableComboBoxesRefresh();
        } catch (RFaceException ex) {
            Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedTypeException ex) {
            Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_iplotsDataframeComboBoxActionPerformed

    private void iplotScatterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iplotScatterButtonActionPerformed
        try {
            // TODO add your handling code here:
            analysisCore.iscatter(iplotsDataframeComboBox.getSelectedItem().toString(),iplotVar1ComboBox.getSelectedItem().toString(),iplotVar2ComboBox.getSelectedItem().toString());
        } catch (RFaceException ex) {
            Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_iplotScatterButtonActionPerformed

    private void iplotBoxPlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iplotBoxPlotButtonActionPerformed
        try {
            // TODO add your handling code here:
            analysisCore.ibox(iplotsDataframeComboBox.getSelectedItem().toString(),iplotVar1ComboBox.getSelectedItem().toString(),groupByComboBox.getSelectedItem().toString());
        } catch (RFaceException ex) {
            Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_iplotBoxPlotButtonActionPerformed

    private void iplotExtractSelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iplotExtractSelectionButtonActionPerformed
        try {
            // TODO add your handling code here:
            analysisCore.retrieveSelection(iplotsDataframeComboBox.getSelectedItem().toString(), iplotSelectionTextField.getText(), iplotSaveDataFrameCheckBox.isSelected(),iplotSaveSelectionCheckBox.isSelected());
        } catch (RFaceException ex) {
            Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedTypeException ex) {
            Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_iplotExtractSelectionButtonActionPerformed

    private void groupByComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupByComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_groupByComboBoxActionPerformed

    private void mergePrefixTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergePrefixTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mergePrefixTextFieldActionPerformed

    private void mergeDataframesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeDataframesButtonActionPerformed
        // TODO add your handling code here:
        analysisCore.merge(mergeDataframeComboBox1.getSelectedItem().toString(),mergeDataframeComboBox2.getSelectedItem().toString(),mergeByColumnComboBox.getSelectedItem().toString(),mergePrefixTextField.getText());
        try {
            refreshDataFrames();
        } catch (RFaceException ex) {
            Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedTypeException ex) {
            Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mergeDataframesButtonActionPerformed

    private void mergeDataframeComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeDataframeComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mergeDataframeComboBox2ActionPerformed

    private void mergeDataframeComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeDataframeComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mergeDataframeComboBox1ActionPerformed

    private void constantNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constantNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_constantNameTextFieldActionPerformed

    private void concatenateDataframesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_concatenateDataframesButtonActionPerformed
        try {
            // TODO add your handling code here:
            analysisCore.concatenate(mergeDataframeComboBox1.getSelectedItem().toString(),mergeDataframeComboBox2.getSelectedItem().toString());
        } catch (RFaceException ex) {
            Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedTypeException ex) {
            Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_concatenateDataframesButtonActionPerformed

    private void constantDataframeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constantDataframeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_constantDataframeComboBoxActionPerformed

    private void ggplotDataframeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ggplotDataframeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ggplotDataframeComboBoxActionPerformed

    private void ggplotEcdfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ggplotEcdfButtonActionPerformed
        // TODO add your handling code here:
        String dataframeName = utils.getSelectedString(ggplotDataframeComboBox);
        String varName = utils.getSelectedString(ggplotVarComboBox);
        String colorName = utils.getSelectedString(ggplotColorComboBox);
        String linetype = utils.getSelectedString(this.ggplotLintypeComboBox);
        String facet = utils.getSelectedString(ggplotFacetComboBox);
        analysisCore.plotECDF(dataframeName,varName,colorName, linetype, facet);
    }//GEN-LAST:event_ggplotEcdfButtonActionPerformed

    private void constantButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constantButtonActionPerformed
        // TODO add your handling code here:
        String constantDataFrameName = constantDataframeComboBox.getSelectedItem().toString();
        String constantName = constantNameTextField.getText();
        String constantValue = constantValueTextField.getText();
        try {
            analysisCore.addConstantColumn(constantDataFrameName, constantName, constantValue);
        } catch (RFaceException ex) {
            Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedTypeException ex) {
            Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_constantButtonActionPerformed

    private void extractButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractButtonActionPerformed
        Map<String,Map<String,ArrayList<String>>> selectionsByTypeThenStructures = new HashMap<String,Map<String,ArrayList<String>>>();
        String dfprefix = prefixTextField.getText();
        TreePath[] selections = measurementTree.getSelectionPaths();
        if(selections != null){
            for(TreePath selection : selections){
                Object keyNode = selection.getPathComponent(3);
                Object structureNode = selection.getPathComponent(2);
                Object typeNode = selection.getPathComponent(1);
                String type = typeNode.toString();
                String structures = structureNode.toString();
                String key = keyNode.toString();
                if(!selectionsByTypeThenStructures.containsKey(type)){
                    selectionsByTypeThenStructures.put(type, new HashMap<String,ArrayList<String>>());
                }
                if(!selectionsByTypeThenStructures.get(type).containsKey(structures)){
                    selectionsByTypeThenStructures.get(type).put(structures, new ArrayList<String>());
                }
                selectionsByTypeThenStructures.get(type).get(structures).add(key);
            }
        }
        int[] selectionIndices = selectionList.getSelectedIndices();
        String[] selectionNames = new String [selectionIndices.length];
        if(selectionIndices.length > 0){
            for(int j=0;j<selectionIndices.length;j++){
                selectionNames[j] = selectionList.getModel().getElementAt(selectionIndices[j]).toString();
            }
        }
        Object[] tagObjects = tagList.getSelectedValues();
        String [] tagNames = new String [tagObjects.length];
        Map<String,String> objectNumberStrings = getObjectNumberStrings();
        if(tagObjects.length > 0){
            for(int j=0;j<tagObjects.length;j++){
                tagNames[j] = (String)tagObjects[j];
            }
        }
        try {
            analysisCore.extract(dfprefix,selectionsByTypeThenStructures, selectionNames, tagNames, objectNumberStrings);
        } catch (RFaceException ex) {
            Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedTypeException ex) {
            Logger.getLogger(AnalysisGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_extractButtonActionPerformed

    private void annotationColumnNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annotationColumnNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_annotationColumnNameTextFieldActionPerformed

    private void mergeDataframeComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeDataframeComboBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mergeDataframeComboBox3ActionPerformed

    private void annotationDataframeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annotationDataframeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_annotationDataframeComboBoxActionPerformed

    private void annotationDefaultValueTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annotationDefaultValueTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_annotationDefaultValueTextFieldActionPerformed

    private void annotationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annotationButtonActionPerformed
        // TODO add your handling code here:
        int[] selectionIndices = annotationSelectionList.getSelectedIndices();
        String[] selectionNames = new String [selectionIndices.length];
        if(selectionIndices.length > 0){
            for(int j=0;j<selectionIndices.length;j++){
                selectionNames[j] = annotationSelectionList.getModel().getElementAt(selectionIndices[j]).toString();
            }
        }
        String dataframeName = annotationDataframeComboBox.getModel().getElementAt(annotationDataframeComboBox.getSelectedIndex()).toString();
        String columnName = annotationColumnNameTextField.getText();
        String defaultAnnotation = annotationDefaultValueTextField.getText();
        analysisCore.annotate(dataframeName, columnName, defaultAnnotation, selectionNames);
    }//GEN-LAST:event_annotationButtonActionPerformed

    private void ggplotColorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ggplotColorComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ggplotColorComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane analysisTabbedPane;
    private javax.swing.JButton annotationButton;
    private javax.swing.JTextField annotationColumnNameTextField;
    private javax.swing.JComboBox annotationDataframeComboBox;
    private javax.swing.JTextField annotationDefaultValueTextField;
    private javax.swing.JPanel annotationPanel;
    private javax.swing.JList annotationSelectionList;
    private javax.swing.JButton concatenateDataframesButton;
    private javax.swing.JButton constantButton;
    private javax.swing.JComboBox constantDataframeComboBox;
    private javax.swing.JTextField constantNameTextField;
    private javax.swing.JTextField constantValueTextField;
    private javax.swing.JButton extractButton;
    private javax.swing.JPanel extractPanel;
    private javax.swing.JTabbedPane filterTabbedPane;
    private javax.swing.JComboBox ggplotColorComboBox;
    private javax.swing.JComboBox ggplotDataframeComboBox;
    private javax.swing.JButton ggplotEcdfButton;
    private javax.swing.JComboBox ggplotFacetComboBox;
    private javax.swing.JComboBox ggplotLintypeComboBox;
    private javax.swing.JComboBox ggplotVarComboBox;
    private javax.swing.JComboBox groupByComboBox;
    private javax.swing.JButton iplotBarButton;
    private javax.swing.JButton iplotBoxPlotButton;
    private javax.swing.JButton iplotExtractSelectionButton;
    private javax.swing.JButton iplotHistButton;
    private javax.swing.JCheckBox iplotSaveDataFrameCheckBox;
    private javax.swing.JCheckBox iplotSaveSelectionCheckBox;
    private javax.swing.JButton iplotScatterButton;
    private javax.swing.JTextField iplotSelectionTextField;
    private javax.swing.JComboBox iplotVar1ComboBox;
    private javax.swing.JComboBox iplotVar2ComboBox;
    private javax.swing.JComboBox iplotsDataframeComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel manipulationPanel;
    private javax.swing.JTree measurementTree;
    private javax.swing.JComboBox mergeByColumnComboBox;
    private javax.swing.JComboBox mergeDataframeComboBox1;
    private javax.swing.JComboBox mergeDataframeComboBox2;
    private javax.swing.JComboBox mergeDataframeComboBox3;
    private javax.swing.JButton mergeDataframesButton;
    private javax.swing.JTextField mergePrefixTextField;
    private javax.swing.JPanel objectNumberPanel;
    private javax.swing.JPanel plotsPanel;
    private javax.swing.JTextField prefixTextField;
    private javax.swing.JTabbedPane rConsoleTabbedPane;
    private javax.swing.JTabbedPane rEditorTabbedPane;
    private javax.swing.JPanel rPanel;
    private javax.swing.JList selectionList;
    private javax.swing.JList tagList;
    // End of variables declaration//GEN-END:variables

    private void measurementTreeRefresh() {
        measurementTree.setModel(analysisCore.getAllMeasurementTree());
    }
    
    public void selectionsRefresh() {
        DefaultListModel listModel = new DefaultListModel();
        listModel.removeAllElements();
        for (String s : analysisCore.getSelections()) listModel.addElement(s);
        System.out.print(analysisCore.getSelections());
        selectionList.setModel(listModel);
        annotationSelectionList.setModel(listModel);
    }

    void setXP() {
        measurementTreeRefresh();
        selectionsRefresh();
        buildObjectNumberPanel();
    }
    
    public void refreshDataFrames() throws RFaceException, UnsupportedTypeException{
        Object[] names = analysisCore.getDataFrameNames().toArray();
        iplotsDataframeComboBox.setModel(new DefaultComboBoxModel(names));
        mergeDataframeComboBox1.setModel(new DefaultComboBoxModel(names));
        mergeDataframeComboBox2.setModel(new DefaultComboBoxModel(names));
        ggplotDataframeComboBox.setModel(new DefaultComboBoxModel(names));
        constantDataframeComboBox.setModel(new DefaultComboBoxModel(names));
        annotationDataframeComboBox.setModel(new DefaultComboBoxModel(names));
        variableComboBoxesRefresh();
    }

    private void variableComboBoxesRefresh() throws RFaceException, UnsupportedTypeException {
        ArrayList<String> numericColumnNames = analysisCore.getDataFrameNumericColumnNames(iplotsDataframeComboBox.getSelectedItem().toString());
        ArrayList<String> allColumnNames = analysisCore.getDataFrameAllColumnNames(iplotsDataframeComboBox.getSelectedItem().toString());
        iplotVar1ComboBox.setModel(new DefaultComboBoxModel(numericColumnNames.toArray()));
        iplotVar2ComboBox.setModel(new DefaultComboBoxModel(numericColumnNames.toArray()));
        groupByComboBox.setModel(new DefaultComboBoxModel(allColumnNames.toArray()));
        
        ArrayList<String> numericColumnNamesGGplot = analysisCore.getDataFrameNumericColumnNames(utils.getSelectedString(this.ggplotDataframeComboBox));
        ArrayList<String> qualColumnNamesGGplot = analysisCore.getDataFrameStringColumnNames(utils.getSelectedString(this.ggplotDataframeComboBox));
        qualColumnNamesGGplot.add(0, "");
        ggplotVarComboBox.setModel(new DefaultComboBoxModel(numericColumnNamesGGplot.toArray()));
        ggplotColorComboBox.setModel(new DefaultComboBoxModel(qualColumnNamesGGplot.toArray()));
        ggplotLintypeComboBox.setModel(new DefaultComboBoxModel(qualColumnNamesGGplot.toArray()));
        ggplotFacetComboBox.setModel(new DefaultComboBoxModel(qualColumnNamesGGplot.toArray()));
        
        
        ArrayList<String> allColumnNamesMerge = analysisCore.getDataFrameAllColumnNames(mergeDataframeComboBox1.getSelectedItem().toString());
        fixComboWidth(mergeByColumnComboBox);
        fixComboWidth(iplotVar1ComboBox);
        fixComboWidth(iplotVar2ComboBox);
        fixComboWidth(groupByComboBox);
        fixComboWidth(ggplotVarComboBox);
        fixComboWidth(ggplotColorComboBox);
        fixComboWidth(ggplotLintypeComboBox);
        fixComboWidth(ggplotFacetComboBox);
    }

    void setRObjectTree(JTree tree) {
        this.rObjectTree = tree;
        this.rObjectTree.setName("Variables");
        rConsoleTabbedPane.add(rObjectTree);
    }

    public void refreshRObjectTree(){
        TreeModel m = analysisCore.getRObjectTreeModel();
        rObjectTree.setModel(m);
    }
    
    public void buildObjectNumberPanel(){
        objectNumberLabels = new ArrayList<JLabel>();
        objectNumberFields = new ArrayList<JTextField>();
        String [] names = analysisCore.getStructureNames();
        objectNumberPanel.setLayout(new GridLayout(names.length,2));
        for(int i=0;i < names.length;i++){
            JLabel jl = new JLabel();
            jl.setText(names[i]);
            System.out.print(names[i]);
            objectNumberLabels.add(jl);
            objectNumberFields.add(new JTextField());
        }
        for(int i=0;i < names.length;i++){
            objectNumberLabels.get(i).setVisible(true);
            objectNumberPanel.add(objectNumberLabels.get(i));
            objectNumberFields.get(i).setVisible(true);
            objectNumberPanel.add(objectNumberFields.get(i));
        }
        objectNumberPanel.revalidate();
    }

    private Map<String,String> getObjectNumberStrings() {
        int n = objectNumberFields.size();
        Map<String,String> objectNumberStrings = new TreeMap();
        for(int i=0;i < n;i++){
            objectNumberStrings.put(objectNumberLabels.get(i).getText(), objectNumberFields.get(i).getText());
        }
        return objectNumberStrings;
    }

}


