package tango.gui;

import ij.ImagePlus;
import ij.WindowManager;
import ij.gui.Roi;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import tango.dataStructure.Cell;
import tango.dataStructure.Experiment;
import tango.dataStructure.Selection;
import tango.gui.util.LCRenderer;
import tango.gui.util.LCRendererROI;
import tango.helper.HelpManager;
import tango.helper.ID;
import tango.helper.RetrieveHelp;
import tango.util.ImageUtils;
import tango.util.RoiInterpolator;
import tango.util.utils;

/**
 *
 **
 * /**
 * Copyright (C) 2012 Jean Ollion
 *
 *
 *
 * This file is part of tango
 *
 * tango is free software; you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Jean Ollion
 */
public class SelectionManager extends javax.swing.JPanel implements ListSelectionListener, AdjustmentListener, MouseWheelListener {

    DefaultListModel listModel;
    ListSelectionModel listSelectionModel;
    CellManager cellManager;
    boolean populatingSelections;
    public SelectionManager(CellManager cellManager) {
        initComponents();
        this.cellManager=cellManager;
        this.listModel = new DefaultListModel();
        this.list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setModel(listModel);
        listSelectionModel = list.getSelectionModel();
        listSelectionModel.addListSelectionListener(this);
        this.list.setCellRenderer(new LCRenderer());
        //list.setPreferredSize(null);
    }
    
    public void toggleIsRunning(boolean isRunning) {
        this.newSelection.setEnabled(!isRunning);
        this.removeFromSelection.setEnabled(!isRunning);
        this.appendToSelection.setEnabled(!isRunning);
        this.rename.setEnabled(!isRunning);
        this.list.setEnabled(!isRunning);
        this.selectObjects.setEnabled(!isRunning);
        this.remove.setEnabled(!isRunning);
        this.showOnly.setEnabled(!isRunning);
    }
    
    protected void populateSelections() {
        Experiment xp = Core.getExperiment();
        ArrayList<Selection> sels = Core.mongoConnector.getSelections(xp.getId());
        populatingSelections=true;
        listModel.removeAllElements();
        if (sels!=null) for (Selection s : sels ) listModel.addElement(s);
        populatingSelections=false;
    }
    
    public Selection getSelection() {
        Object o = list.getSelectedValue();
        if (o!=null) return (Selection)o;
        else return null;
    }
    
    public boolean isShowOnly() {
        return this.showOnly.isSelected();
    }
    
    public void update() {
        Selection s = getSelection();
        this.populateSelections();
        if (s==null) return;
        if (listModel.contains(s)) {
            ij.IJ.log("update selections: contains selection"+s.getName());
            list.setSelectedValue(s, true);
            cellManager.populateCells();
        } else ij.IJ.log("update selections: doesn't contain selection"+s.getName());
    }
    
    public void registerComponents(HelpManager hm) {
        /*hm.objectIDs.put(this.newSelection, new ID(RetrieveHelp.manualNucPage, "Add_or_Update_ROI"));
        hm.objectIDs.put(this.remove, new ID(RetrieveHelp.manualNucPage, "Remove"));
        hm.objectIDs.put(this.rename, new ID(RetrieveHelp.manualNucPage, "Interpolate"));
        hm.objectIDs.put(this.showOnly, new ID(RetrieveHelp.manualNucPage, "Show"));
        hm.objectIDs.put(this.selectObjects, new ID(RetrieveHelp.manualNucPage, "New_Object"));
        hm.objectIDs.put(this.removeFromSelection, new ID(RetrieveHelp.manualNucPage, "ROIs_to_Mask"));
        hm.objectIDs.put(this.appendToSelection, new ID(RetrieveHelp.manualNucPage, "Mask_to_ROIs"));
        * 
        */
    }
    
   
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newSelection = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        rename = new javax.swing.JButton();
        showOnly = new javax.swing.JToggleButton();
        listScrollPane = new javax.swing.JScrollPane();
        list = new javax.swing.JList();
        appendToSelection = new javax.swing.JButton();
        removeFromSelection = new javax.swing.JButton();
        selectObjects = new javax.swing.JToggleButton();
        update = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Selections"));
        setMaximumSize(null);
        setMinimumSize(null);
        setPreferredSize(null);

        newSelection.setText("New");
        newSelection.setMaximumSize(new java.awt.Dimension(150, 25));
        newSelection.setMinimumSize(new java.awt.Dimension(150, 25));
        newSelection.setPreferredSize(new java.awt.Dimension(150, 25));
        newSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSelectionActionPerformed(evt);
            }
        });

        remove.setText("Remove");
        remove.setMaximumSize(new java.awt.Dimension(150, 25));
        remove.setMinimumSize(new java.awt.Dimension(150, 25));
        remove.setPreferredSize(new java.awt.Dimension(150, 25));
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        rename.setText("Rename");
        rename.setMaximumSize(new java.awt.Dimension(150, 25));
        rename.setMinimumSize(new java.awt.Dimension(150, 25));
        rename.setPreferredSize(new java.awt.Dimension(150, 25));
        rename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameActionPerformed(evt);
            }
        });

        showOnly.setText("Show Only");
        showOnly.setMaximumSize(new java.awt.Dimension(150, 25));
        showOnly.setMinimumSize(new java.awt.Dimension(150, 25));
        showOnly.setPreferredSize(new java.awt.Dimension(150, 25));
        showOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showOnlyActionPerformed(evt);
            }
        });

        listScrollPane.setMaximumSize(new java.awt.Dimension(150, 32767));
        listScrollPane.setMinimumSize(new java.awt.Dimension(150, 250));
        listScrollPane.setPreferredSize(new java.awt.Dimension(150, 250));

        list.setCellRenderer(new LCRendererROI());
        list.setMaximumSize(new java.awt.Dimension(150, 32767));
        list.setMinimumSize(new java.awt.Dimension(150, 250));
        list.setPreferredSize(new java.awt.Dimension(150, 600));
        listScrollPane.setViewportView(list);

        appendToSelection.setText("Append to Selection");
        appendToSelection.setMaximumSize(new java.awt.Dimension(150, 25));
        appendToSelection.setMinimumSize(new java.awt.Dimension(150, 25));
        appendToSelection.setPreferredSize(new java.awt.Dimension(150, 25));
        appendToSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appendToSelectionActionPerformed(evt);
            }
        });

        removeFromSelection.setText("Remove From Selection");
        removeFromSelection.setMaximumSize(new java.awt.Dimension(150, 25));
        removeFromSelection.setMinimumSize(new java.awt.Dimension(150, 25));
        removeFromSelection.setPreferredSize(new java.awt.Dimension(150, 25));
        removeFromSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFromSelectionActionPerformed(evt);
            }
        });

        selectObjects.setText("Select Objects");
        selectObjects.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectObjectsActionPerformed(evt);
            }
        });

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(listScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(update, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newSelection, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                    .addComponent(remove, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rename, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showOnly, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(appendToSelection, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeFromSelection, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectObjects, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(newSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showOnly, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectObjects, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(appendToSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeFromSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 24, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    protected void clearSelection() {
        this.list.clearSelection();
        this.showOnly.setSelected(false);
        cellManager.populateCells();
    }
    
    private void showOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showOnlyActionPerformed
        cellManager.populateCells();
    }//GEN-LAST:event_showOnlyActionPerformed

    private void newSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSelectionActionPerformed
        // TODO refresh cell manager?
        String name = JOptionPane.showInputDialog("Selection Name");
        if (utils.isValid(name, false)) {
            for (int i = 0; i<listModel.getSize(); i++) {
                Selection s = (Selection) listModel.getElementAt(i);
                if (name.equals(s.getName())) {
                    ij.IJ.error("Name Already existing");
                    return;
                }
            }
            Selection s = new Selection(name, Core.getExperiment().getId());
            s.save();
            listModel.addElement(s);
            list.setSelectedValue(s, true);
            // TODO refresh cell manager?
        } else ij.IJ.error("Invalid Name");
    }//GEN-LAST:event_newSelectionActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        Selection s = getSelection();
        if (s==null) return;
        if (JOptionPane.showConfirmDialog(this, "Remove Selection: " + s.getName() + " ?", "TANGO", JOptionPane.OK_CANCEL_OPTION) == 0) {
            s.removeFromDB();
            listModel.removeElement(s);
            cellManager.populateCells();
        }
        
    }//GEN-LAST:event_removeActionPerformed

    private void renameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameActionPerformed
        Selection s = getSelection();
        if (s==null) return;
        int idx = list.getSelectedIndex();
        String name = JOptionPane.showInputDialog("Selection Name");
        if (utils.isValid(name, false)) {
            for (int i = 0; i<listModel.getSize(); i++) {
                Selection ss = (Selection) listModel.getElementAt(i);
                if (name.equals(ss.getName())) {
                    ij.IJ.error("Name Already existing");
                    return;
                }
            }
            s.append("name", name);
            s.save();
            // remove and add because hashcode is generated from selection name
            listModel.remove(idx);
            listModel.add(idx, s);
            list.updateUI();
            list.setSelectedIndex(idx);
        } else ij.IJ.error("Invalid Name");
    }//GEN-LAST:event_renameActionPerformed

    private void appendToSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appendToSelectionActionPerformed
        Selection s = getSelection();
        if (s==null) return;
        Cell[] cells = cellManager.getSelectedCells(false);
        if (cells.length==0) return;
        else if (cells.length==1) {
            HashMap<Integer, ArrayList<Integer>> selObjects = cellManager.getSelectedObjects();
            s.appendToNucleus(cells[0].getId(), selObjects);
        } else {
            s.appendCells(cells);
        }
        cellManager.populateCells();
    }//GEN-LAST:event_appendToSelectionActionPerformed

    private void removeFromSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFromSelectionActionPerformed
        Selection s = getSelection();
        if (s==null) return;
        Cell[] cells = cellManager.getSelectedCells(false);
        if (cells.length==0) return;
        else if (cells.length==1) {
            HashMap<Integer, ArrayList<Integer>> selObjects = cellManager.getSelectedObjects();
            if (selObjects.isEmpty()) s.removeCells(cells);
            else s.removeFromNucleus(cells[0].getId(), selObjects);
        } else {
            s.removeCells(cells);
        }
        cellManager.populateCells();
    }//GEN-LAST:event_removeFromSelectionActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        update();
    }//GEN-LAST:event_updateActionPerformed

    private void selectObjectsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectObjectsActionPerformed
        cellManager.populateCells();
    }//GEN-LAST:event_selectObjectsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton appendToSelection;
    private javax.swing.JList list;
    private javax.swing.JScrollPane listScrollPane;
    private javax.swing.JButton newSelection;
    private javax.swing.JButton remove;
    private javax.swing.JButton removeFromSelection;
    private javax.swing.JButton rename;
    public javax.swing.JToggleButton selectObjects;
    protected javax.swing.JToggleButton showOnly;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

    @Override
    public void valueChanged(ListSelectionEvent lse) {
        if (populatingSelections) return;
        if (lse.getValueIsAdjusting()) return;
        cellManager.populateCells();
    }

    @Override
    public void adjustmentValueChanged(AdjustmentEvent ae) {

    }

    @Override
    public void mouseWheelMoved(MouseWheelEvent mwe) {

    }
}
